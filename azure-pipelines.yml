trigger:
  branches:
    include:
      - main
      - rel/*
  paths:
    exclude:
      - .devcontainer
      - .github
      - .vscode
      - docs
      - images
      - BACKERS.md
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - SUPPORT.md
pr:
  branches:
    include:
      - main
      - rel/*
  paths:
    exclude:
      - .devcontainer
      - .github
      - .vscode
      - docs
      - images
      - BACKERS.md
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md
      - SUPPORT.md

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_GENERATE_ASPNET_CERTIFICATE: 0
  DOTNET_NOLOGO: 1
  CI: 1
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
  - stage: Build
    jobs:
      - job: build
        workspace:
          clean: all
        pool:
          vmImage: windows-2022
        timeoutInMinutes: 5
        steps:
          - checkout: self
            fetchDepth: 1
          - task: Cache@2
            displayName: Cache
            inputs:
              # https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/caching-nuget?view=azure-devops
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
              path: '$(NUGET_PACKAGES)'
              cacheHitVar: 'CACHE_RESTORED'
          - powershell: |
              "Running .NET SDK v$(dotnet --version)"
              ./build.ps1 -LockedRestore -Clean -Inline
          - publish: $(Build.SourcesDirectory)
            artifact: all

  - stage: Test
    jobs:
      - job:
        workspace:
          clean: all
        strategy:
          matrix:
            PS7_Ubuntu_20_04:
              vmImage: ubuntu-20.04
              pwsh: true
            PS7_Ubuntu_22_04:
              vmImage: ubuntu-22.04
              pwsh: true
            PS7_macOS_11:
              vmImage: macOS-11
              pwsh: true
            PS7_macOS_12:
              vmImage: macOS-12
              pwsh: true
            PS7_Windows_Server2019:
              vmImage: windows-2019
              pwsh: true
            PS7_Windows_Server2022:
              vmImage: windows-2022
              pwsh: true
            PS_5_1_Windows_Server2022:
              vmImage: windows-2022
              pwsh: false
        pool:
          vmImage: $[ variables['vmImage'] ]
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'all'
              targetPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            displayName: 'Test Pester'
            inputs:
              targetType: inline
              pwsh: $(pwsh)
              script: |
                & ./test.ps1 -CI -PassThru -NoBuild
              workingDirectory: '$(Build.SourcesDirectory)'
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: 'coverage.xml'
              pathToSources: 'src/'
              failIfCoverageEmpty: false
            condition: succeededOrFailed()
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'testResults.xml'
              failTaskOnFailedTests: true
            condition: succeededOrFailed()
        timeoutInMinutes: 20
